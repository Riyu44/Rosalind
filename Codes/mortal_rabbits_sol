import os

def solve_mortal_fibonacci_rabbits(n, m):
    """
    Calculates the number of rabbit pairs after n months, given a lifespan of m months.

    Args:
        n (int): The total number of months.
        m (int): The lifespan of a rabbit pair in months.

    Returns:
        int: The number of rabbit pairs after n months.
    """
    # Initialize the list with the first two months' rabbit pairs (F_0 and F_1)
    # F_0 = 1 (initial pair)
    # F_1 = 1 (still 1 pair as they reproduce from month 1)
    bunnies = [1, 1]
    
    # Start simulating from the third month (index 2)
    # The 'months' variable will represent the current month index being calculated
    # For a list 'bunnies' of length 'k', the next month to calculate is 'k'.
    # In the loop, 'months' corresponds to the index of the Fibonacci number we are computing.
    months = 2 

    # Loop until we reach the target number of months (n)
    while months < n:
        # Case 1: Before any rabbits die (months < m)
        # The recurrence relation is the standard Fibonacci: F_k = F_{k-1} + F_{k-2}
        if months < m:
            bunnies.append(bunnies[months - 1] + bunnies[months - 2])
        # Case 2: When the first group of rabbits dies (at month m or m+1)
        # At month 'm', the rabbits born at month 0 die.
        # At month 'm+1', the rabbits born at month 1 die.
        # Both these initial groups consist of 1 pair.
        # The recurrence becomes: F_k = F_{k-1} + F_{k-2} - 1 (subtracting the initial dying pair)
        elif months == m or months == m + 1: # Fixed 'count' to 'months'
            bunnies.append(bunnies[months - 1] + bunnies[months - 2] - 1)
        # Case 3: After the initial dying groups, the general case for rabbits dying
        # For months > m + 1, rabbits born 'm' months ago die.
        # The number of rabbits born 'm' months ago is F_{k - m - 1}.
        # So, F_k = F_{k-1} + F_{k-2} - F_{k-m-1}
        else:
            # bunnies[months - (m + 1)] correctly accesses the F_{k-m-1} term
            bunnies.append(bunnies[months - 1] + bunnies[months - 2] - bunnies[months - (m + 1)]) # Fixed missing parenthesis

        # Move to the next month
        months += 1
    
    # Return the number of rabbit pairs at the end of 'n' months
    # Since 'months' is the index, after the loop finishes (months == n), 
    # the last element 'bunnies[n-1]' will be the count for month 'n'.
    return bunnies[n - 1] # Access the last computed value for month 'n'

# --- Example Usage ---

# Test with the provided values
n_val = 95
m_val = 20
result = solve_mortal_fibonacci_rabbits(n_val, m_val)
print(f"Number of rabbit pairs after {n_val} months with a lifespan of {m_val} months: {result}")

# Another example
n_val_2 = 6
m_val_2 = 3
result_2 = solve_mortal_fibonacci_rabbits(n_val_2, m_val_2)
# Expected for n=6, m=3:
# F0=1, F1=1
# F2=F1+F0=2
# F3=F2+F1-F0 = 2+1-1=2 (F0 dies)
# F4=F3+F2-F1 = 2+2-1=3 (F1 dies)
# F5=F4+F3-F2 = 3+2-2=3 (F2 dies)
print(f"Number of rabbit pairs after {n_val_2} months with a lifespan of {m_val_2} months: {result_2}")

